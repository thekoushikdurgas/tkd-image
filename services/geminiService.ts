import { GoogleGenAI } from "@google/genai";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const fileToBase64 = (file: File): Promise<{ base64: string, mimeType: string }> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result as string;
      const base64 = result.split(',')[1];
      resolve({ base64, mimeType: file.type });
    };
    reader.onerror = (error) => reject(error);
  });
};

export const analyzeImageForPrompt = async (
  base64: string,
  mimeType: string
): Promise<string> => {
  const imagePart = {
    inlineData: { data: base64, mimeType },
  };
  const textPart = {
    text: "Can you give me a prompt that changes a normal person's photo style and, in the prompt, give the full details of the image, including everything?",
  };
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: { parts: [imagePart, textPart] },
  });
  return response.text;
};

export const generateImage = async (
  prompt: string,
  aspectRatio: string,
  outputMimeType: 'image/png' | 'image/jpeg'
): Promise<string> => {
  const response = await ai.models.generateImages({
    model: 'imagen-4.0-generate-001',
    prompt: prompt,
    config: {
      numberOfImages: 1,
      outputMimeType,
      aspectRatio,
    },
  });

  const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
  if (!base64ImageBytes) {
      throw new Error("No image generated by the API.");
  }
  return base64ImageBytes;
};
